#!/bin/env bash

# -----------------------------------------------------------------------------
# Original code as a base is https://github.com/chris-marsh/pureline
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# returns a string with the powerline symbol for a section end
# arg: $1 is foreground color of the next section
# arg: $2 is background color of the next section
function section_end {
  if [ "$__last_color" == "$2" ]; then
    # Section colors are the same, use a foreground separator
    local end_char="${symbols[soft_separator]}"
    local fg=$1
  else
    # section colors are different, use a background separator
    local end_char="${symbols[hard_separator]}"
    local fg=$__last_color
  fi
  if [ -n "$__last_color" ]; then
    echo "${colors[$fg]}${colors[On_$2]}$end_char"
  fi
}

# -----------------------------------------------------------------------------
# returns a string with background and foreground colours set
# arg: $1 foreground color
# arg: $2 background color
# arg: $3 content
function section_content {
  echo "${colors[$1]}${colors[On_$2]}$3"
}


#-------------------------------------------------------------------------------
# Modules
#-------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# append to prompt: user@host or user or root@host
# arg: $1 foreground color (red if root)
# arg: $2 background color
# optional arg: $3 - true/false to show the hostname
function user_module {
  local bg_color=$1
  local fg_color=$2
  # Show host if true or when user is remote/root
  if [[ "$3" = true || "${SSH_CLIENT}" || "${SSH_TTY}" || ${EUID} = 0 ]]; then
    local content="\u@\h"
  else
    local content="\u"
  fi
  PS1+=$(section_end $fg_color $bg_color)
  PS1+=$(section_content $fg_color $bg_color " $content ")
  __last_color=$bg_color
}

# -----------------------------------------------------------------------------
# append to prompt: user@host
# arg: $1 foreground color
# arg: $2 background color
# optional arg: $3 - true/false to show the username
function host_module {
  local bg_color=$1
  local fg_color=$2
  if [ "$3" = true ]; then
    local content="\u@\h"
  else
    local content="\h"
  fi
  PS1+=$(section_end $fg_color $bg_color)
  PS1+=$(section_content $fg_color $bg_color)
  __last_color=$bg_color
}

# -----------------------------------------------------------------------------
# append to prompt: current directory
# arg: $1 foreground color
# arg; $2 background color
# optional arg: $3 - 0 — fullpath, 1 — current dir, [x] — trim to x number of
# directories
function path_module {
  local bg_color=$1
  local fg_color=$2
  local content="\w"
  if [ $3 -eq 1 ]; then
    local content="\W"
  elif [ $3 -gt 1 ]; then
    PROMPT_DIRTRIM=$3
  fi
  PS1+=$(section_content $fg_color $bg_color " $content ")
  __last_color=$bg_color
}

# -----------------------------------------------------------------------------
# append to prompt: the number of background jobs running
# arg: $1 foreground color
# arg; $2 background color
function jobs_module {
  local bg_color=$1
  local fg_color=$2
  local number_jobs=$(jobs -p | wc -l)
  if [ ! "$number_jobs" -eq 0 ]; then
    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color " ${symbols[enter]} $number_jobs ")
    __last_color=$bg_color
  fi
}

# -----------------------------------------------------------------------------
# append to prompt: indicator is the current directory is ready-only
# arg: $1 foreground color
# arg; $2 background color
function read_only_module {
  local bg_color=$1
  local fg_color=$2
  if [ ! -w "$PWD" ]; then
    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color " ${symbols[lock]} ")
    __last_color=$bg_color
  fi
}

# -----------------------------------------------------------------------------
# append to prompt: number of git stash
# arg: $1 foreground color
# arg; $2 background color
function git_stash_module {
  local number_stash=$(git stash list 2>/dev/null | wc -l)
  if [ ! "$number_stash" -eq 0 ]; then
    local bg_color=$1
    local fg_color=$2
    local content="${symbols[stash]} $number_stash"
    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color " $content ")
    __last_color=$bg_color
  fi
}

# arg: $1 background color
# arg; $2 foreground color
function git_ahead_behind_module {
    local number_behind_ahead=$(git rev-list --count --left-right '@{upstream}...HEAD' 2>/dev/null)
    local number_ahead="${number_behind_ahead#*	}"
    local number_behind="${number_behind_ahead%	*}"
    if [ ! "0$number_ahead" -eq 0 -o ! "0$number_behind" -eq 0 ]; then
        local bg_color=$1
        local fg_color=$2
        local content=" ☁ "
        if [ ! "$number_ahead" -eq 0 ]; then
            content+="${symbols[ahead]}$number_ahead "
        fi
        if [ ! "$number_behind" -eq 0 ]; then
            content+="${symbols[behind]}$number_behind "
        fi
        PS1+=$(section_end $fg_color $bg_color)
        PS1+=$(section_content $fg_color $bg_color "$content")
        __last_color=$bg_color
    fi
}

# arg: $1 background color (clean)
# arg; $2 foreground color (clean)
# arg: $3 background color (dirty)
# arg; $4 foreground color (dirty)
# arg: $5 background color (staged)
# arg; $6 foreground color (staged)
function git_status_module {
    local bg_color_clean=$1
    local fg_color_clean=$2
    local bg_color_dirty=$3
    local fg_color_dirty=$4
    local bg_color_staged=$5
    local fg_color_staged=$6
    local git_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [ -z "${git_branch}" ]; then
      return
    fi

    local -i add=0
    local -i modify=0
    local -i delete=0
    local -i unknown=0

    local -i add_staged=0
    local -i modify_staged=0
    local -i delete_staged=0
    local -i rename=0

    while read l; do
      local -i num=$(cut -dx -f1 <<< $l | tr x " ");
      local kind=$(cut -dx -f2- <<< $l | tr x " ");
      local staged=${kind:0:1};
      local not_staged=${kind:1:2};

      if [ "$not_staged" == "A" ]; then
        add=$add+$num
      elif [ "$not_staged" == "M" ]; then
        modify=$modify+$num
      elif [ "$not_staged" == "D" ]; then
        delete=$delete+$num
      elif [ "$not_staged" == "?" ]; then
        unknown=$unknown+$num
      fi;

      if [ "$staged" == "A" ]; then
        add_staged=$add_staged+$num
      elif [ "$staged" == "M" ]; then
        modify_staged=$modify_staged+$num
      elif [ "$staged" == "D" ]; then
        delete_staged=$delete_staged+$num
      elif [ "$staged" == "R" ]; then
        rename=$rename+$num
      fi;
    done <<< "$(git status --porcelain | cut -c-2 | sort | uniq -c 2>/dev/null | sed -r 's/^ +//g' | tr ' ' x)"

    #-----------------------
    # local
    #-----------------------
    local local_content="${symbols[git]} $git_branch$git "
    if [ ! $add -eq 0 -o ! $modify -eq 0 -o ! $delete -eq 0 -o ! $unknown -eq 0 ]; then
        if [ ! $add -eq 0 ]; then
            local_content+="+${add} "
        fi
        if [ ! $modify -eq 0 ]; then
            local_content+="*${modify} "
        fi
        if [ ! $delete -eq 0 ]; then
            local_content+="-${delete} "
        fi
        if [ ! $unknown -eq 0 ]; then
            local_content+="?${unknown} "
        fi

        PS1+=$(section_end $fg_color_dirty $bg_color_dirty)
        PS1+=$(section_content $fg_color_dirty $bg_color_dirty " $local_content")
        __last_color=$bg_color_dirty
    else
        PS1+=$(section_end $fg_color_clean $bg_color_clean)
        PS1+=$(section_content $fg_color_clean $bg_color_clean " $local_content")
        __last_color=$bg_color_clean
    fi

    #-----------------------
    # staged
    #-----------------------
    local staged_content="${symbols[staged]} "
    if [ ! $add_staged -eq 0 -o ! $modify_staged -eq 0 -o ! $delete_staged -eq 0 -o ! $rename -eq 0 ]; then
        if [ ! $add_staged -eq 0 ]; then
            staged_content+="+${add_staged} "
        fi
        if [ ! $modify_staged -eq 0 ]; then
            staged_content+="*${modify_staged} "
        fi
        if [ ! $delete_staged -eq 0 ]; then
            staged_content+="-${delete_staged} "
        fi
        if [ ! $rename -eq 0 ]; then
            staged_content+="🎃${rename} "
        fi

        PS1+=$(section_end $fg_color_staged $bg_color_staged)
        PS1+=$(section_content $fg_color_staged $bg_color_staged " $staged_content")
        __last_color=$bg_color_staged
    fi
}

# -----------------------------------------------------------------------------
# append to prompt: append a '$' prompt with optional return code for previous command
# arg: $1 foreground color
# arg; $2 background color
function return_code_module {
  if [ ! "$__return_code" -eq 0 ]; then
    local bg_color=$1
    local fg_color=$2
    local content=" ${symbols[error]} $__return_code "

    PS1+=$(section_end $fg_color $bg_color)
    PS1+=$(section_content $fg_color $bg_color "$content")
    __last_color=$bg_color
  fi
}


function pureline_ps1 {
  __return_code=$?      # save the return code
  PS1=""

  # load the modules
  for module in "${!pureline_modules[@]}"; do
    ${pureline_modules[$module]}
  done

  # final end point
  if [ -n "$__last_color" ]; then
    PS1+=$(section_end $__last_color 'Default')
  else
    PS1="$"
  fi

  # cleanup
  PS1+="${colors[Color_Off]}\[\e[K\] "
  unset __last_color
  unset __return_code
}

# -----------------------------------------------------------------------------

# define the basic color set
declare -A colors=(
[Color_Off]='\[\e[0m\]'       # Text Reset
# Foreground
[Default]='\[\e[0;39m\]'      # Default
[Black]='\[\e[0;30m\]'        # Black
[Red]='\[\e[0;31m\]'          # Red
[Green]='\[\e[0;32m\]'        # Green
[Yellow]='\[\e[0;33m\]'       # Yellow
[Blue]='\[\e[0;34m\]'         # Blue
[Purple]='\[\e[0;35m\]'       # Purple
[Cyan]='\[\e[0;36m\]'         # Cyan
[White]='\[\e[0;37m\]'        # White
# Background
[On_Default]='\[\e[49m\]'     # Default
[On_Black]='\[\e[40m\]'       # Black
[On_Red]='\[\e[41m\]'         # Red
[On_Green]='\[\e[42m\]'       # Green
[On_Yellow]='\[\e[43m\]'      # Yellow
[On_Blue]='\[\e[44m\]'        # Blue
[On_Purple]='\[\e[45m\]'      # Purple
[On_Cyan]='\[\e[46m\]'        # Cyan
[On_White]='\[\e[47m\]'       # White
)

# define symbols
declare -A symbols=(
[hard_separator]=""
[soft_separator]=""
[git]=""
[lock]=""
[error]="⚠ "
[plus]="+"
[tick]="✔"
[cross]="✘"
[enter]="⏎"
[battery_charging]="⚡"
[battery_discharging]="▮"
[untracked]="U"
[stash]="🐿"
[staged]="↗"
[ahead]="↑"
[behind]="↓"
)

# check if an argument has been given for a config file
if [ -f "$1" ]; then
  source $1
else
  # define default modules to load
  declare -a pureline_modules=(
  'host_module        Yellow      Black       false'
  'path_module        Blue        Black       0'
  'read_only_module   Red         White'
  )
fi

# dynamically set the  PS1
PROMPT_COMMAND="pureline_ps1; $PROMPT_COMMAND"
